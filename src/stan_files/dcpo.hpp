/*
    DCPO is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    DCPO is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with DCPO.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.18.0

#include <stan/model/model_header.hpp>

namespace model_dcpo_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_dcpo");
    reader.add_event(114, 112, "end", "model_dcpo");
    return reader;
}

template <typename T0__>
typename boost::math::tools::promote_args<T0__>::type
p2l_real(const T0__& x, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 3;
        local_scalar_t__ y;
        (void) y;  // dummy to suppress unused var warning

        stan::math::initialize(y, DUMMY_VAR__);
        stan::math::fill(y,DUMMY_VAR__);


        current_statement_begin__ = 4;
        stan::math::assign(y, ((0.070559999999999998 * pow(x,3)) + (1.5975999999999999 * x)));
        current_statement_begin__ = 5;
        return stan::math::promote_scalar<fun_return_scalar_t__>(y);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct p2l_real_functor__ {
    template <typename T0__>
        typename boost::math::tools::promote_args<T0__>::type
    operator()(const T0__& x, std::ostream* pstream__) const {
        return p2l_real(x, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
p2l_vector(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& x, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 8;
        validate_non_negative_index("y", "num_elements(x)", num_elements(x));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  y(static_cast<Eigen::VectorXd::Index>(num_elements(x)));
        (void) y;  // dummy to suppress unused var warning

        stan::math::initialize(y, DUMMY_VAR__);
        stan::math::fill(y,DUMMY_VAR__);


        current_statement_begin__ = 9;
        for (int i = 1; i <= num_elements(x); ++i) {

            current_statement_begin__ = 10;
            stan::model::assign(y, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        ((0.070559999999999998 * pow(get_base1(x,i,"x",1),3)) + (1.5975999999999999 * get_base1(x,i,"x",1))), 
                        "assigning variable y");
        }
        current_statement_begin__ = 12;
        return stan::math::promote_scalar<fun_return_scalar_t__>(y);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct p2l_vector_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& x, std::ostream* pstream__) const {
        return p2l_vector(x, pstream__);
    }
};

#include <meta_header.hpp>
 class model_dcpo : public prob_grad {
private:
    int K;
    int T;
    int Q;
    int R;
    vector<vector<vector<vector<double> > > > N;
    vector<vector<int> > unused_cut;
    vector<vector<int> > fixed_cutp;
    int N_nonzero;
public:
    model_dcpo(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_dcpo(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_dcpo_namespace::model_dcpo";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 17;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            current_statement_begin__ = 18;
            context__.validate_dims("data initialization", "T", "int", context__.to_vec());
            T = int(0);
            vals_i__ = context__.vals_i("T");
            pos__ = 0;
            T = vals_i__[pos__++];
            current_statement_begin__ = 19;
            context__.validate_dims("data initialization", "Q", "int", context__.to_vec());
            Q = int(0);
            vals_i__ = context__.vals_i("Q");
            pos__ = 0;
            Q = vals_i__[pos__++];
            current_statement_begin__ = 20;
            context__.validate_dims("data initialization", "R", "int", context__.to_vec());
            R = int(0);
            vals_i__ = context__.vals_i("R");
            pos__ = 0;
            R = vals_i__[pos__++];
            current_statement_begin__ = 21;
            validate_non_negative_index("N", "T", T);
            validate_non_negative_index("N", "K", K);
            validate_non_negative_index("N", "Q", Q);
            validate_non_negative_index("N", "R", R);
            context__.validate_dims("data initialization", "N", "double", context__.to_vec(T,K,Q,R));
            validate_non_negative_index("N", "T", T);
            validate_non_negative_index("N", "K", K);
            validate_non_negative_index("N", "Q", Q);
            validate_non_negative_index("N", "R", R);
            N = std::vector<std::vector<std::vector<std::vector<double> > > >(T,std::vector<std::vector<std::vector<double> > >(K,std::vector<std::vector<double> >(Q,std::vector<double>(R,double(0)))));
            vals_r__ = context__.vals_r("N");
            pos__ = 0;
            size_t N_limit_3__ = R;
            for (size_t i_3__ = 0; i_3__ < N_limit_3__; ++i_3__) {
                size_t N_limit_2__ = Q;
                for (size_t i_2__ = 0; i_2__ < N_limit_2__; ++i_2__) {
                    size_t N_limit_1__ = K;
                    for (size_t i_1__ = 0; i_1__ < N_limit_1__; ++i_1__) {
                        size_t N_limit_0__ = T;
                        for (size_t i_0__ = 0; i_0__ < N_limit_0__; ++i_0__) {
                            N[i_0__][i_1__][i_2__][i_3__] = vals_r__[pos__++];
                        }
                    }
                }
            }
            current_statement_begin__ = 22;
            validate_non_negative_index("unused_cut", "Q", Q);
            validate_non_negative_index("unused_cut", "(R - 1)", (R - 1));
            context__.validate_dims("data initialization", "unused_cut", "int", context__.to_vec(Q,(R - 1)));
            validate_non_negative_index("unused_cut", "Q", Q);
            validate_non_negative_index("unused_cut", "(R - 1)", (R - 1));
            unused_cut = std::vector<std::vector<int> >(Q,std::vector<int>((R - 1),int(0)));
            vals_i__ = context__.vals_i("unused_cut");
            pos__ = 0;
            size_t unused_cut_limit_1__ = (R - 1);
            for (size_t i_1__ = 0; i_1__ < unused_cut_limit_1__; ++i_1__) {
                size_t unused_cut_limit_0__ = Q;
                for (size_t i_0__ = 0; i_0__ < unused_cut_limit_0__; ++i_0__) {
                    unused_cut[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 23;
            validate_non_negative_index("fixed_cutp", "Q", Q);
            validate_non_negative_index("fixed_cutp", "(R - 1)", (R - 1));
            context__.validate_dims("data initialization", "fixed_cutp", "int", context__.to_vec(Q,(R - 1)));
            validate_non_negative_index("fixed_cutp", "Q", Q);
            validate_non_negative_index("fixed_cutp", "(R - 1)", (R - 1));
            fixed_cutp = std::vector<std::vector<int> >(Q,std::vector<int>((R - 1),int(0)));
            vals_i__ = context__.vals_i("fixed_cutp");
            pos__ = 0;
            size_t fixed_cutp_limit_1__ = (R - 1);
            for (size_t i_1__ = 0; i_1__ < fixed_cutp_limit_1__; ++i_1__) {
                size_t fixed_cutp_limit_0__ = Q;
                for (size_t i_0__ = 0; i_0__ < fixed_cutp_limit_0__; ++i_0__) {
                    fixed_cutp[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 24;
            context__.validate_dims("data initialization", "N_nonzero", "int", context__.to_vec());
            N_nonzero = int(0);
            vals_i__ = context__.vals_i("N_nonzero");
            pos__ = 0;
            N_nonzero = vals_i__[pos__++];

            // validate, data variables
            current_statement_begin__ = 17;
            check_greater_or_equal(function__,"K",K,1);
            current_statement_begin__ = 18;
            check_greater_or_equal(function__,"T",T,1);
            current_statement_begin__ = 19;
            check_greater_or_equal(function__,"Q",Q,1);
            current_statement_begin__ = 20;
            check_greater_or_equal(function__,"R",R,1);
            current_statement_begin__ = 21;
            for (int k0__ = 0; k0__ < T; ++k0__) {
                for (int k1__ = 0; k1__ < K; ++k1__) {
                    for (int k2__ = 0; k2__ < Q; ++k2__) {
                        for (int k3__ = 0; k3__ < R; ++k3__) {
                            check_greater_or_equal(function__,"N[k0__][k1__][k2__][k3__]",N[k0__][k1__][k2__][k3__],0);
                        }
                    }
                }
            }
            current_statement_begin__ = 22;
            current_statement_begin__ = 23;
            current_statement_begin__ = 24;
            check_greater_or_equal(function__,"N_nonzero",N_nonzero,0);
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 28;
            validate_non_negative_index("raw_bar_theta_N01", "T", T);
            validate_non_negative_index("raw_bar_theta_N01", "K", K);
            num_params_r__ += T * K;
            current_statement_begin__ = 29;
            validate_non_negative_index("alpha", "Q", Q);
            validate_non_negative_index("alpha", "1", 1);
            num_params_r__ += Q * 1;
            current_statement_begin__ = 30;
            validate_non_negative_index("raw_beta", "(R - 1)", (R - 1));
            validate_non_negative_index("raw_beta", "Q", Q);
            num_params_r__ += (R - 1) * Q;
            current_statement_begin__ = 31;
            validate_non_negative_index("sd_theta", "1", 1);
            num_params_r__ += 1;
            current_statement_begin__ = 32;
            ++num_params_r__;
            current_statement_begin__ = 33;
            validate_non_negative_index("sd_raw_bar_theta_evolve_N01_kk", "K", K);
            num_params_r__ += K;
            current_statement_begin__ = 34;
            ++num_params_r__;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_dcpo() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("raw_bar_theta_N01")))
            throw std::runtime_error("variable raw_bar_theta_N01 missing");
        vals_r__ = context__.vals_r("raw_bar_theta_N01");
        pos__ = 0U;
        validate_non_negative_index("raw_bar_theta_N01", "T", T);
        validate_non_negative_index("raw_bar_theta_N01", "K", K);
        context__.validate_dims("initialization", "raw_bar_theta_N01", "double", context__.to_vec(T,K));
        std::vector<std::vector<double> > raw_bar_theta_N01(T,std::vector<double>(K,double(0)));
        for (int i1__ = 0U; i1__ < K; ++i1__)
            for (int i0__ = 0U; i0__ < T; ++i0__)
                raw_bar_theta_N01[i0__][i1__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < T; ++i0__)
            for (int i1__ = 0U; i1__ < K; ++i1__)
                try {
            writer__.scalar_unconstrain(raw_bar_theta_N01[i0__][i1__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable raw_bar_theta_N01: ") + e.what());
        }

        if (!(context__.contains_r("alpha")))
            throw std::runtime_error("variable alpha missing");
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "Q", Q);
        validate_non_negative_index("alpha", "1", 1);
        context__.validate_dims("initialization", "alpha", "double", context__.to_vec(Q,1));
        std::vector<std::vector<double> > alpha(Q,std::vector<double>(1,double(0)));
        for (int i1__ = 0U; i1__ < 1; ++i1__)
            for (int i0__ = 0U; i0__ < Q; ++i0__)
                alpha[i0__][i1__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < Q; ++i0__)
            for (int i1__ = 0U; i1__ < 1; ++i1__)
                try {
            writer__.scalar_lb_unconstrain(0,alpha[i0__][i1__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable alpha: ") + e.what());
        }

        if (!(context__.contains_r("raw_beta")))
            throw std::runtime_error("variable raw_beta missing");
        vals_r__ = context__.vals_r("raw_beta");
        pos__ = 0U;
        validate_non_negative_index("raw_beta", "Q", Q);
        validate_non_negative_index("raw_beta", "(R - 1)", (R - 1));
        context__.validate_dims("initialization", "raw_beta", "vector_d", context__.to_vec(Q,(R - 1)));
        std::vector<vector_d> raw_beta(Q,vector_d(static_cast<Eigen::VectorXd::Index>((R - 1))));
        for (int j1__ = 0U; j1__ < (R - 1); ++j1__)
            for (int i0__ = 0U; i0__ < Q; ++i0__)
                raw_beta[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < Q; ++i0__)
            try {
            writer__.ordered_unconstrain(raw_beta[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable raw_beta: ") + e.what());
        }

        if (!(context__.contains_r("sd_theta")))
            throw std::runtime_error("variable sd_theta missing");
        vals_r__ = context__.vals_r("sd_theta");
        pos__ = 0U;
        validate_non_negative_index("sd_theta", "1", 1);
        context__.validate_dims("initialization", "sd_theta", "vector_d", context__.to_vec(1));
        vector_d sd_theta(static_cast<Eigen::VectorXd::Index>(1));
        for (int j1__ = 0U; j1__ < 1; ++j1__)
            sd_theta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,sd_theta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_theta: ") + e.what());
        }

        if (!(context__.contains_r("sd_raw_bar_theta_evolve_N01")))
            throw std::runtime_error("variable sd_raw_bar_theta_evolve_N01 missing");
        vals_r__ = context__.vals_r("sd_raw_bar_theta_evolve_N01");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_raw_bar_theta_evolve_N01", "double", context__.to_vec());
        double sd_raw_bar_theta_evolve_N01(0);
        sd_raw_bar_theta_evolve_N01 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_raw_bar_theta_evolve_N01);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_raw_bar_theta_evolve_N01: ") + e.what());
        }

        if (!(context__.contains_r("sd_raw_bar_theta_evolve_N01_kk")))
            throw std::runtime_error("variable sd_raw_bar_theta_evolve_N01_kk missing");
        vals_r__ = context__.vals_r("sd_raw_bar_theta_evolve_N01_kk");
        pos__ = 0U;
        validate_non_negative_index("sd_raw_bar_theta_evolve_N01_kk", "K", K);
        context__.validate_dims("initialization", "sd_raw_bar_theta_evolve_N01_kk", "vector_d", context__.to_vec(K));
        vector_d sd_raw_bar_theta_evolve_N01_kk(static_cast<Eigen::VectorXd::Index>(K));
        for (int j1__ = 0U; j1__ < K; ++j1__)
            sd_raw_bar_theta_evolve_N01_kk(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(sd_raw_bar_theta_evolve_N01_kk);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_raw_bar_theta_evolve_N01_kk: ") + e.what());
        }

        if (!(context__.contains_r("B_cut")))
            throw std::runtime_error("variable B_cut missing");
        vals_r__ = context__.vals_r("B_cut");
        pos__ = 0U;
        context__.validate_dims("initialization", "B_cut", "double", context__.to_vec());
        double B_cut(0);
        B_cut = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,B_cut);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable B_cut: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            vector<vector<local_scalar_t__> > raw_bar_theta_N01;
            size_t dim_raw_bar_theta_N01_0__ = T;
            raw_bar_theta_N01.resize(dim_raw_bar_theta_N01_0__);
            for (size_t k_0__ = 0; k_0__ < dim_raw_bar_theta_N01_0__; ++k_0__) {
                size_t dim_raw_bar_theta_N01_1__ = K;
                raw_bar_theta_N01[k_0__].reserve(dim_raw_bar_theta_N01_1__);
                for (size_t k_1__ = 0; k_1__ < dim_raw_bar_theta_N01_1__; ++k_1__) {
                    if (jacobian__)
                        raw_bar_theta_N01[k_0__].push_back(in__.scalar_constrain(lp__));
                    else
                        raw_bar_theta_N01[k_0__].push_back(in__.scalar_constrain());
                }
            }

            vector<vector<local_scalar_t__> > alpha;
            size_t dim_alpha_0__ = Q;
            alpha.resize(dim_alpha_0__);
            for (size_t k_0__ = 0; k_0__ < dim_alpha_0__; ++k_0__) {
                size_t dim_alpha_1__ = 1;
                alpha[k_0__].reserve(dim_alpha_1__);
                for (size_t k_1__ = 0; k_1__ < dim_alpha_1__; ++k_1__) {
                    if (jacobian__)
                        alpha[k_0__].push_back(in__.scalar_lb_constrain(0,lp__));
                    else
                        alpha[k_0__].push_back(in__.scalar_lb_constrain(0));
                }
            }

            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > raw_beta;
            size_t dim_raw_beta_0__ = Q;
            raw_beta.reserve(dim_raw_beta_0__);
            for (size_t k_0__ = 0; k_0__ < dim_raw_beta_0__; ++k_0__) {
                if (jacobian__)
                    raw_beta.push_back(in__.ordered_constrain((R - 1),lp__));
                else
                    raw_beta.push_back(in__.ordered_constrain((R - 1)));
            }

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  sd_theta;
            (void) sd_theta;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_theta = in__.vector_lb_constrain(0,1,lp__);
            else
                sd_theta = in__.vector_lb_constrain(0,1);

            local_scalar_t__ sd_raw_bar_theta_evolve_N01;
            (void) sd_raw_bar_theta_evolve_N01;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_raw_bar_theta_evolve_N01 = in__.scalar_lb_constrain(0,lp__);
            else
                sd_raw_bar_theta_evolve_N01 = in__.scalar_lb_constrain(0);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  sd_raw_bar_theta_evolve_N01_kk;
            (void) sd_raw_bar_theta_evolve_N01_kk;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_raw_bar_theta_evolve_N01_kk = in__.vector_constrain(K,lp__);
            else
                sd_raw_bar_theta_evolve_N01_kk = in__.vector_constrain(K);

            local_scalar_t__ B_cut;
            (void) B_cut;  // dummy to suppress unused var warning
            if (jacobian__)
                B_cut = in__.scalar_lb_constrain(0,lp__);
            else
                B_cut = in__.scalar_lb_constrain(0);


            // transformed parameters
            current_statement_begin__ = 39;
            validate_non_negative_index("raw_bar_theta", "T", T);
            validate_non_negative_index("raw_bar_theta", "K", K);
            vector<vector<local_scalar_t__> > raw_bar_theta(T, (vector<local_scalar_t__>(K)));
            stan::math::initialize(raw_bar_theta, DUMMY_VAR__);
            stan::math::fill(raw_bar_theta,DUMMY_VAR__);
            current_statement_begin__ = 40;
            validate_non_negative_index("bar_theta", "T", T);
            validate_non_negative_index("bar_theta", "K", K);
            vector<vector<local_scalar_t__> > bar_theta(T, (vector<local_scalar_t__>(K)));
            stan::math::initialize(bar_theta, DUMMY_VAR__);
            stan::math::fill(bar_theta,DUMMY_VAR__);
            current_statement_begin__ = 41;
            validate_non_negative_index("beta", "(R - 1)", (R - 1));
            validate_non_negative_index("beta", "Q", Q);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > beta(Q, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>((R - 1)))));
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta,DUMMY_VAR__);
            current_statement_begin__ = 42;
            validate_non_negative_index("sd_raw_bar_theta_evolve", "K", K);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  sd_raw_bar_theta_evolve(static_cast<Eigen::VectorXd::Index>(K));
            (void) sd_raw_bar_theta_evolve;  // dummy to suppress unused var warning

            stan::math::initialize(sd_raw_bar_theta_evolve, DUMMY_VAR__);
            stan::math::fill(sd_raw_bar_theta_evolve,DUMMY_VAR__);
            current_statement_begin__ = 43;
            validate_non_negative_index("Sigma_theta", "1", 1);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  Sigma_theta(static_cast<Eigen::VectorXd::Index>(1),static_cast<Eigen::VectorXd::Index>(1));
            (void) Sigma_theta;  // dummy to suppress unused var warning

            stan::math::initialize(Sigma_theta, DUMMY_VAR__);
            stan::math::fill(Sigma_theta,DUMMY_VAR__);


            current_statement_begin__ = 45;
            stan::math::assign(Sigma_theta, diag_matrix(elt_multiply(sd_theta,sd_theta)));
            current_statement_begin__ = 46;
            for (int k = 1; k <= K; ++k) {

                current_statement_begin__ = 48;
                stan::model::assign(sd_raw_bar_theta_evolve, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                            (sd_raw_bar_theta_evolve_N01 + (get_base1(sd_raw_bar_theta_evolve_N01_kk,k,"sd_raw_bar_theta_evolve_N01_kk",1) * 0.20000000000000001)), 
                            "assigning variable sd_raw_bar_theta_evolve");
            }
            current_statement_begin__ = 51;
            for (int q = 1; q <= Q; ++q) {

                current_statement_begin__ = 52;
                for (int r = 1; r <= (R - 1); ++r) {

                    current_statement_begin__ = 53;
                    if (as_bool(logical_eq(get_base1(get_base1(fixed_cutp,q,"fixed_cutp",1),r,"fixed_cutp",2),1))) {

                        current_statement_begin__ = 54;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(q), stan::model::cons_list(stan::model::index_uni(r), stan::model::nil_index_list())), 
                                    0.5, 
                                    "assigning variable beta");
                    } else {

                        current_statement_begin__ = 56;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(q), stan::model::cons_list(stan::model::index_uni(r), stan::model::nil_index_list())), 
                                    get_base1(get_base1(raw_beta,q,"raw_beta",1),r,"raw_beta",2), 
                                    "assigning variable beta");
                    }
                }
            }
            current_statement_begin__ = 60;
            for (int k = 1; k <= K; ++k) {

                current_statement_begin__ = 61;
                stan::model::assign(raw_bar_theta, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), 
                            get_base1(get_base1(raw_bar_theta_N01,1,"raw_bar_theta_N01",1),k,"raw_bar_theta_N01",2), 
                            "assigning variable raw_bar_theta");
                current_statement_begin__ = 62;
                stan::model::assign(bar_theta, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), 
                            inv_logit(get_base1(get_base1(raw_bar_theta,1,"raw_bar_theta",1),k,"raw_bar_theta",2)), 
                            "assigning variable bar_theta");
                current_statement_begin__ = 63;
                for (int t = 2; t <= T; ++t) {

                    current_statement_begin__ = 65;
                    stan::model::assign(raw_bar_theta, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), 
                                stan::model::deep_copy((get_base1(get_base1(raw_bar_theta,(t - 1),"raw_bar_theta",1),k,"raw_bar_theta",2) + (get_base1(sd_raw_bar_theta_evolve,k,"sd_raw_bar_theta_evolve",1) * get_base1(get_base1(raw_bar_theta_N01,t,"raw_bar_theta_N01",1),k,"raw_bar_theta_N01",2)))), 
                                "assigning variable raw_bar_theta");
                    current_statement_begin__ = 67;
                    stan::model::assign(bar_theta, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), 
                                inv_logit(get_base1(get_base1(raw_bar_theta,t,"raw_bar_theta",1),k,"raw_bar_theta",2)), 
                                "assigning variable bar_theta");
                }
            }

            // validate transformed parameters
            for (int i0__ = 0; i0__ < T; ++i0__) {
                for (int i1__ = 0; i1__ < K; ++i1__) {
                    if (stan::math::is_uninitialized(raw_bar_theta[i0__][i1__])) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: raw_bar_theta" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < T; ++i0__) {
                for (int i1__ = 0; i1__ < K; ++i1__) {
                    if (stan::math::is_uninitialized(bar_theta[i0__][i1__])) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: bar_theta" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < Q; ++i0__) {
                for (int i1__ = 0; i1__ < (R - 1); ++i1__) {
                    if (stan::math::is_uninitialized(beta[i0__](i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: beta" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < K; ++i0__) {
                if (stan::math::is_uninitialized(sd_raw_bar_theta_evolve(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: sd_raw_bar_theta_evolve" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < 1; ++i0__) {
                for (int i1__ = 0; i1__ < 1; ++i1__) {
                    if (stan::math::is_uninitialized(Sigma_theta(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: Sigma_theta" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 39;
            current_statement_begin__ = 40;
            current_statement_begin__ = 41;
            for (int k0__ = 0; k0__ < Q; ++k0__) {
                stan::math::check_ordered(function__,"beta[k0__]",beta[k0__]);
            }
            current_statement_begin__ = 42;
            check_greater_or_equal(function__,"sd_raw_bar_theta_evolve",sd_raw_bar_theta_evolve,0);
            current_statement_begin__ = 43;
            stan::math::check_cov_matrix(function__,"Sigma_theta",Sigma_theta);

            // model body
            {
            current_statement_begin__ = 73;
            validate_non_negative_index("loglike_summands", "N_nonzero", N_nonzero);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  loglike_summands(static_cast<Eigen::VectorXd::Index>(N_nonzero));
            (void) loglike_summands;  // dummy to suppress unused var warning

            stan::math::initialize(loglike_summands, DUMMY_VAR__);
            stan::math::fill(loglike_summands,DUMMY_VAR__);
            current_statement_begin__ = 74;
            int N_pos(0);
            (void) N_pos;  // dummy to suppress unused var warning

            stan::math::fill(N_pos, std::numeric_limits<int>::min());
            stan::math::assign(N_pos,0);


            current_statement_begin__ = 76;
            for (int q = 1; q <= Q; ++q) {
                {
                current_statement_begin__ = 77;
                local_scalar_t__ used_cutp;
                (void) used_cutp;  // dummy to suppress unused var warning

                stan::math::initialize(used_cutp, DUMMY_VAR__);
                stan::math::fill(used_cutp,DUMMY_VAR__);
                stan::math::assign(used_cutp,((R - 1) - sum(stan::model::rvalue(unused_cut, stan::model::cons_list(stan::model::index_uni(q), stan::model::cons_list(stan::model::index_min_max(1, (R - 1)), stan::model::nil_index_list())), "unused_cut"))));
                current_statement_begin__ = 78;
                local_scalar_t__ adjust_int;
                (void) adjust_int;  // dummy to suppress unused var warning

                stan::math::initialize(adjust_int, DUMMY_VAR__);
                stan::math::fill(adjust_int,DUMMY_VAR__);
                stan::math::assign(adjust_int,((used_cutp / 2) + 0.5));
                current_statement_begin__ = 79;
                local_scalar_t__ adjust_slp;
                (void) adjust_slp;  // dummy to suppress unused var warning

                stan::math::initialize(adjust_slp, DUMMY_VAR__);
                stan::math::fill(adjust_slp,DUMMY_VAR__);
                stan::math::assign(adjust_slp,1);


                current_statement_begin__ = 80;
                if (as_bool(logical_gt(used_cutp,1))) {

                    current_statement_begin__ = 81;
                    stan::math::assign(adjust_slp, (used_cutp - 1));
                }
                current_statement_begin__ = 83;
                for (int r = 1; r <= (R - 1); ++r) {
                    {
                    current_statement_begin__ = 84;
                    local_scalar_t__ priormean;
                    (void) priormean;  // dummy to suppress unused var warning

                    stan::math::initialize(priormean, DUMMY_VAR__);
                    stan::math::fill(priormean,DUMMY_VAR__);
                    stan::math::assign(priormean,((100 * get_base1(get_base1(unused_cut,q,"unused_cut",1),r,"unused_cut",2)) + ((B_cut / adjust_slp) * (r - adjust_int))));


                    current_statement_begin__ = 85;
                    lp_accum__.add(normal_log<propto__>(get_base1(get_base1(raw_beta,q,"raw_beta",1),r,"raw_beta",2), priormean, 1));
                    }
                }
                }
            }
            current_statement_begin__ = 88;
            lp_accum__.add(std_normal_log<propto__>(to_array_1d(raw_bar_theta_N01)));
            current_statement_begin__ = 89;
            lp_accum__.add(normal_log<propto__>(to_array_1d(alpha), 0, 10));
            current_statement_begin__ = 90;
            lp_accum__.add(std_normal_log<propto__>(sd_theta));
            current_statement_begin__ = 91;
            lp_accum__.add(std_normal_log<propto__>(sd_raw_bar_theta_evolve_N01));
            current_statement_begin__ = 92;
            lp_accum__.add(std_normal_log<propto__>(sd_raw_bar_theta_evolve_N01_kk));
            current_statement_begin__ = 93;
            lp_accum__.add(std_normal_log<propto__>(B_cut));
            current_statement_begin__ = 95;
            for (int r = 1; r <= R; ++r) {

                current_statement_begin__ = 96;
                for (int q = 1; q <= Q; ++q) {
                    {
                    current_statement_begin__ = 97;
                    local_scalar_t__ z_denom;
                    (void) z_denom;  // dummy to suppress unused var warning

                    stan::math::initialize(z_denom, DUMMY_VAR__);
                    stan::math::fill(z_denom,DUMMY_VAR__);
                    stan::math::assign(z_denom,stan::math::sqrt((1 + quad_form(Sigma_theta,to_vector(get_base1(alpha,q,"alpha",1))))));
                    current_statement_begin__ = 98;
                    validate_non_negative_index("cut", "(R - 1)", (R - 1));
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  cut(static_cast<Eigen::VectorXd::Index>((R - 1)));
                    (void) cut;  // dummy to suppress unused var warning

                    stan::math::initialize(cut, DUMMY_VAR__);
                    stan::math::fill(cut,DUMMY_VAR__);
                    stan::math::assign(cut,p2l_vector(divide(stan::model::rvalue(get_base1(beta,q,"beta",1), stan::model::cons_list(stan::model::index_min_max(1, (R - 1)), stan::model::nil_index_list()), "beta[q]"),z_denom), pstream__));


                    current_statement_begin__ = 99;
                    for (int k = 1; k <= K; ++k) {

                        current_statement_begin__ = 100;
                        for (int t = 1; t <= T; ++t) {

                            current_statement_begin__ = 101;
                            if (as_bool(logical_gt(get_base1(get_base1(get_base1(get_base1(N,t,"N",1),k,"N",2),q,"N",3),r,"N",4),0))) {
                                {
                                current_statement_begin__ = 102;
                                local_scalar_t__ eta;
                                (void) eta;  // dummy to suppress unused var warning

                                stan::math::initialize(eta, DUMMY_VAR__);
                                stan::math::fill(eta,DUMMY_VAR__);


                                current_statement_begin__ = 103;
                                stan::math::assign(N_pos, (N_pos + 1));
                                current_statement_begin__ = 104;
                                stan::math::assign(eta, p2l_real(((get_base1(get_base1(alpha,q,"alpha",1),1,"alpha",2) * get_base1(get_base1(bar_theta,t,"bar_theta",1),k,"bar_theta",2)) / z_denom), pstream__));
                                current_statement_begin__ = 105;
                                stan::model::assign(loglike_summands, 
                                            stan::model::cons_list(stan::model::index_uni(N_pos), stan::model::nil_index_list()), 
                                            (get_base1(get_base1(get_base1(get_base1(N,t,"N",1),k,"N",2),q,"N",3),r,"N",4) * ordered_logistic_log(r,eta,cut)), 
                                            "assigning variable loglike_summands");
                                }
                            }
                        }
                    }
                    }
                }
            }
            current_statement_begin__ = 111;
            lp_accum__.add(sum(loglike_summands));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("raw_bar_theta_N01");
        names__.push_back("alpha");
        names__.push_back("raw_beta");
        names__.push_back("sd_theta");
        names__.push_back("sd_raw_bar_theta_evolve_N01");
        names__.push_back("sd_raw_bar_theta_evolve_N01_kk");
        names__.push_back("B_cut");
        names__.push_back("raw_bar_theta");
        names__.push_back("bar_theta");
        names__.push_back("beta");
        names__.push_back("sd_raw_bar_theta_evolve");
        names__.push_back("Sigma_theta");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dims__.push_back(1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dims__.push_back((R - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dims__.push_back((R - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(1);
        dims__.push_back(1);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_dcpo_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector<vector<double> > raw_bar_theta_N01;
        size_t dim_raw_bar_theta_N01_0__ = T;
        raw_bar_theta_N01.resize(dim_raw_bar_theta_N01_0__);
        for (size_t k_0__ = 0; k_0__ < dim_raw_bar_theta_N01_0__; ++k_0__) {
            size_t dim_raw_bar_theta_N01_1__ = K;
            for (size_t k_1__ = 0; k_1__ < dim_raw_bar_theta_N01_1__; ++k_1__) {
                raw_bar_theta_N01[k_0__].push_back(in__.scalar_constrain());
            }
        }
        vector<vector<double> > alpha;
        size_t dim_alpha_0__ = Q;
        alpha.resize(dim_alpha_0__);
        for (size_t k_0__ = 0; k_0__ < dim_alpha_0__; ++k_0__) {
            size_t dim_alpha_1__ = 1;
            for (size_t k_1__ = 0; k_1__ < dim_alpha_1__; ++k_1__) {
                alpha[k_0__].push_back(in__.scalar_lb_constrain(0));
            }
        }
        vector<vector_d> raw_beta;
        size_t dim_raw_beta_0__ = Q;
        for (size_t k_0__ = 0; k_0__ < dim_raw_beta_0__; ++k_0__) {
            raw_beta.push_back(in__.ordered_constrain((R - 1)));
        }
        vector_d sd_theta = in__.vector_lb_constrain(0,1);
        double sd_raw_bar_theta_evolve_N01 = in__.scalar_lb_constrain(0);
        vector_d sd_raw_bar_theta_evolve_N01_kk = in__.vector_constrain(K);
        double B_cut = in__.scalar_lb_constrain(0);
            for (int k_1__ = 0; k_1__ < K; ++k_1__) {
                for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(raw_bar_theta_N01[k_0__][k_1__]);
                }
            }
            for (int k_1__ = 0; k_1__ < 1; ++k_1__) {
                for (int k_0__ = 0; k_0__ < Q; ++k_0__) {
                vars__.push_back(alpha[k_0__][k_1__]);
                }
            }
            for (int k_1__ = 0; k_1__ < (R - 1); ++k_1__) {
                for (int k_0__ = 0; k_0__ < Q; ++k_0__) {
                vars__.push_back(raw_beta[k_0__][k_1__]);
                }
            }
            for (int k_0__ = 0; k_0__ < 1; ++k_0__) {
            vars__.push_back(sd_theta[k_0__]);
            }
        vars__.push_back(sd_raw_bar_theta_evolve_N01);
            for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(sd_raw_bar_theta_evolve_N01_kk[k_0__]);
            }
        vars__.push_back(B_cut);

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 39;
            validate_non_negative_index("raw_bar_theta", "T", T);
            validate_non_negative_index("raw_bar_theta", "K", K);
            vector<vector<local_scalar_t__> > raw_bar_theta(T, (vector<local_scalar_t__>(K)));
            stan::math::initialize(raw_bar_theta, DUMMY_VAR__);
            stan::math::fill(raw_bar_theta,DUMMY_VAR__);
            current_statement_begin__ = 40;
            validate_non_negative_index("bar_theta", "T", T);
            validate_non_negative_index("bar_theta", "K", K);
            vector<vector<local_scalar_t__> > bar_theta(T, (vector<local_scalar_t__>(K)));
            stan::math::initialize(bar_theta, DUMMY_VAR__);
            stan::math::fill(bar_theta,DUMMY_VAR__);
            current_statement_begin__ = 41;
            validate_non_negative_index("beta", "(R - 1)", (R - 1));
            validate_non_negative_index("beta", "Q", Q);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > beta(Q, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>((R - 1)))));
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta,DUMMY_VAR__);
            current_statement_begin__ = 42;
            validate_non_negative_index("sd_raw_bar_theta_evolve", "K", K);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  sd_raw_bar_theta_evolve(static_cast<Eigen::VectorXd::Index>(K));
            (void) sd_raw_bar_theta_evolve;  // dummy to suppress unused var warning

            stan::math::initialize(sd_raw_bar_theta_evolve, DUMMY_VAR__);
            stan::math::fill(sd_raw_bar_theta_evolve,DUMMY_VAR__);
            current_statement_begin__ = 43;
            validate_non_negative_index("Sigma_theta", "1", 1);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  Sigma_theta(static_cast<Eigen::VectorXd::Index>(1),static_cast<Eigen::VectorXd::Index>(1));
            (void) Sigma_theta;  // dummy to suppress unused var warning

            stan::math::initialize(Sigma_theta, DUMMY_VAR__);
            stan::math::fill(Sigma_theta,DUMMY_VAR__);


            current_statement_begin__ = 45;
            stan::math::assign(Sigma_theta, diag_matrix(elt_multiply(sd_theta,sd_theta)));
            current_statement_begin__ = 46;
            for (int k = 1; k <= K; ++k) {

                current_statement_begin__ = 48;
                stan::model::assign(sd_raw_bar_theta_evolve, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                            (sd_raw_bar_theta_evolve_N01 + (get_base1(sd_raw_bar_theta_evolve_N01_kk,k,"sd_raw_bar_theta_evolve_N01_kk",1) * 0.20000000000000001)), 
                            "assigning variable sd_raw_bar_theta_evolve");
            }
            current_statement_begin__ = 51;
            for (int q = 1; q <= Q; ++q) {

                current_statement_begin__ = 52;
                for (int r = 1; r <= (R - 1); ++r) {

                    current_statement_begin__ = 53;
                    if (as_bool(logical_eq(get_base1(get_base1(fixed_cutp,q,"fixed_cutp",1),r,"fixed_cutp",2),1))) {

                        current_statement_begin__ = 54;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(q), stan::model::cons_list(stan::model::index_uni(r), stan::model::nil_index_list())), 
                                    0.5, 
                                    "assigning variable beta");
                    } else {

                        current_statement_begin__ = 56;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(q), stan::model::cons_list(stan::model::index_uni(r), stan::model::nil_index_list())), 
                                    get_base1(get_base1(raw_beta,q,"raw_beta",1),r,"raw_beta",2), 
                                    "assigning variable beta");
                    }
                }
            }
            current_statement_begin__ = 60;
            for (int k = 1; k <= K; ++k) {

                current_statement_begin__ = 61;
                stan::model::assign(raw_bar_theta, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), 
                            get_base1(get_base1(raw_bar_theta_N01,1,"raw_bar_theta_N01",1),k,"raw_bar_theta_N01",2), 
                            "assigning variable raw_bar_theta");
                current_statement_begin__ = 62;
                stan::model::assign(bar_theta, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), 
                            inv_logit(get_base1(get_base1(raw_bar_theta,1,"raw_bar_theta",1),k,"raw_bar_theta",2)), 
                            "assigning variable bar_theta");
                current_statement_begin__ = 63;
                for (int t = 2; t <= T; ++t) {

                    current_statement_begin__ = 65;
                    stan::model::assign(raw_bar_theta, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), 
                                stan::model::deep_copy((get_base1(get_base1(raw_bar_theta,(t - 1),"raw_bar_theta",1),k,"raw_bar_theta",2) + (get_base1(sd_raw_bar_theta_evolve,k,"sd_raw_bar_theta_evolve",1) * get_base1(get_base1(raw_bar_theta_N01,t,"raw_bar_theta_N01",1),k,"raw_bar_theta_N01",2)))), 
                                "assigning variable raw_bar_theta");
                    current_statement_begin__ = 67;
                    stan::model::assign(bar_theta, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), 
                                inv_logit(get_base1(get_base1(raw_bar_theta,t,"raw_bar_theta",1),k,"raw_bar_theta",2)), 
                                "assigning variable bar_theta");
                }
            }

            // validate transformed parameters
            current_statement_begin__ = 39;
            current_statement_begin__ = 40;
            current_statement_begin__ = 41;
            for (int k0__ = 0; k0__ < Q; ++k0__) {
                stan::math::check_ordered(function__,"beta[k0__]",beta[k0__]);
            }
            current_statement_begin__ = 42;
            check_greater_or_equal(function__,"sd_raw_bar_theta_evolve",sd_raw_bar_theta_evolve,0);
            current_statement_begin__ = 43;
            stan::math::check_cov_matrix(function__,"Sigma_theta",Sigma_theta);

            // write transformed parameters
            if (include_tparams__) {
            for (int k_1__ = 0; k_1__ < K; ++k_1__) {
                for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(raw_bar_theta[k_0__][k_1__]);
                }
            }
            for (int k_1__ = 0; k_1__ < K; ++k_1__) {
                for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(bar_theta[k_0__][k_1__]);
                }
            }
            for (int k_1__ = 0; k_1__ < (R - 1); ++k_1__) {
                for (int k_0__ = 0; k_0__ < Q; ++k_0__) {
                vars__.push_back(beta[k_0__][k_1__]);
                }
            }
            for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(sd_raw_bar_theta_evolve[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < 1; ++k_1__) {
                for (int k_0__ = 0; k_0__ < 1; ++k_0__) {
                vars__.push_back(Sigma_theta(k_0__, k_1__));
                }
            }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_dcpo";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "raw_bar_theta_N01" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= 1; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= (R - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "raw_beta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= 1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_raw_bar_theta_evolve_N01";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_raw_bar_theta_evolve_N01_kk" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "B_cut";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "raw_bar_theta" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "bar_theta" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= (R - 1); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "beta" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sd_raw_bar_theta_evolve" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_1__ = 1; k_1__ <= 1; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= 1; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Sigma_theta" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }


        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "raw_bar_theta_N01" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= 1; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= (R - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "raw_beta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= 1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_raw_bar_theta_evolve_N01";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_raw_bar_theta_evolve_N01_kk" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "B_cut";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "raw_bar_theta" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "bar_theta" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= (R - 1); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "beta" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sd_raw_bar_theta_evolve" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= (1 + ((1 * (1 - 1)) / 2)); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Sigma_theta" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
    }

}; // model

}

typedef model_dcpo_namespace::model_dcpo stan_model;


#endif
