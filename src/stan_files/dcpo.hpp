/*
    DCPO is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    DCPO is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with DCPO.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.18.0

#include <stan/model/model_header.hpp>

namespace model_dcpo_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_dcpo");
    reader.add_event(90, 88, "end", "model_dcpo");
    return reader;
}

#include <meta_header.hpp>
 class model_dcpo : public prob_grad {
private:
    int K;
    int T;
    int Q;
    int R;
    int N;
    vector<int> kk;
    vector<int> tt;
    vector<int> kktt;
    vector<int> qq;
    vector<int> rr;
    vector<int> rq;
    int r_fixed;
    vector<int> rcp;
    vector<int> y_r;
    vector<int> n_r;
public:
    model_dcpo(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_dcpo(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_dcpo_namespace::model_dcpo";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "T", "int", context__.to_vec());
            T = int(0);
            vals_i__ = context__.vals_i("T");
            pos__ = 0;
            T = vals_i__[pos__++];
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "Q", "int", context__.to_vec());
            Q = int(0);
            vals_i__ = context__.vals_i("Q");
            pos__ = 0;
            Q = vals_i__[pos__++];
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "R", "int", context__.to_vec());
            R = int(0);
            vals_i__ = context__.vals_i("R");
            pos__ = 0;
            R = vals_i__[pos__++];
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 7;
            validate_non_negative_index("kk", "N", N);
            context__.validate_dims("data initialization", "kk", "int", context__.to_vec(N));
            validate_non_negative_index("kk", "N", N);
            kk = std::vector<int>(N,int(0));
            vals_i__ = context__.vals_i("kk");
            pos__ = 0;
            size_t kk_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < kk_limit_0__; ++i_0__) {
                kk[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 8;
            validate_non_negative_index("tt", "N", N);
            context__.validate_dims("data initialization", "tt", "int", context__.to_vec(N));
            validate_non_negative_index("tt", "N", N);
            tt = std::vector<int>(N,int(0));
            vals_i__ = context__.vals_i("tt");
            pos__ = 0;
            size_t tt_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < tt_limit_0__; ++i_0__) {
                tt[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 9;
            validate_non_negative_index("kktt", "N", N);
            context__.validate_dims("data initialization", "kktt", "int", context__.to_vec(N));
            validate_non_negative_index("kktt", "N", N);
            kktt = std::vector<int>(N,int(0));
            vals_i__ = context__.vals_i("kktt");
            pos__ = 0;
            size_t kktt_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < kktt_limit_0__; ++i_0__) {
                kktt[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 10;
            validate_non_negative_index("qq", "N", N);
            context__.validate_dims("data initialization", "qq", "int", context__.to_vec(N));
            validate_non_negative_index("qq", "N", N);
            qq = std::vector<int>(N,int(0));
            vals_i__ = context__.vals_i("qq");
            pos__ = 0;
            size_t qq_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < qq_limit_0__; ++i_0__) {
                qq[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 11;
            validate_non_negative_index("rr", "N", N);
            context__.validate_dims("data initialization", "rr", "int", context__.to_vec(N));
            validate_non_negative_index("rr", "N", N);
            rr = std::vector<int>(N,int(0));
            vals_i__ = context__.vals_i("rr");
            pos__ = 0;
            size_t rr_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < rr_limit_0__; ++i_0__) {
                rr[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("rq", "R", R);
            context__.validate_dims("data initialization", "rq", "int", context__.to_vec(R));
            validate_non_negative_index("rq", "R", R);
            rq = std::vector<int>(R,int(0));
            vals_i__ = context__.vals_i("rq");
            pos__ = 0;
            size_t rq_limit_0__ = R;
            for (size_t i_0__ = 0; i_0__ < rq_limit_0__; ++i_0__) {
                rq[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "r_fixed", "int", context__.to_vec());
            r_fixed = int(0);
            vals_i__ = context__.vals_i("r_fixed");
            pos__ = 0;
            r_fixed = vals_i__[pos__++];
            current_statement_begin__ = 14;
            validate_non_negative_index("rcp", "R", R);
            context__.validate_dims("data initialization", "rcp", "int", context__.to_vec(R));
            validate_non_negative_index("rcp", "R", R);
            rcp = std::vector<int>(R,int(0));
            vals_i__ = context__.vals_i("rcp");
            pos__ = 0;
            size_t rcp_limit_0__ = R;
            for (size_t i_0__ = 0; i_0__ < rcp_limit_0__; ++i_0__) {
                rcp[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 15;
            validate_non_negative_index("y_r", "N", N);
            context__.validate_dims("data initialization", "y_r", "int", context__.to_vec(N));
            validate_non_negative_index("y_r", "N", N);
            y_r = std::vector<int>(N,int(0));
            vals_i__ = context__.vals_i("y_r");
            pos__ = 0;
            size_t y_r_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < y_r_limit_0__; ++i_0__) {
                y_r[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 16;
            validate_non_negative_index("n_r", "N", N);
            context__.validate_dims("data initialization", "n_r", "int", context__.to_vec(N));
            validate_non_negative_index("n_r", "N", N);
            n_r = std::vector<int>(N,int(0));
            vals_i__ = context__.vals_i("n_r");
            pos__ = 0;
            size_t n_r_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < n_r_limit_0__; ++i_0__) {
                n_r[i_0__] = vals_i__[pos__++];
            }

            // validate, data variables
            current_statement_begin__ = 2;
            check_greater_or_equal(function__,"K",K,1);
            current_statement_begin__ = 3;
            check_greater_or_equal(function__,"T",T,1);
            current_statement_begin__ = 4;
            check_greater_or_equal(function__,"Q",Q,1);
            current_statement_begin__ = 5;
            check_greater_or_equal(function__,"R",R,1);
            current_statement_begin__ = 6;
            check_greater_or_equal(function__,"N",N,1);
            current_statement_begin__ = 7;
            for (int k0__ = 0; k0__ < N; ++k0__) {
                check_greater_or_equal(function__,"kk[k0__]",kk[k0__],1);
                check_less_or_equal(function__,"kk[k0__]",kk[k0__],K);
            }
            current_statement_begin__ = 8;
            for (int k0__ = 0; k0__ < N; ++k0__) {
                check_greater_or_equal(function__,"tt[k0__]",tt[k0__],1);
                check_less_or_equal(function__,"tt[k0__]",tt[k0__],T);
            }
            current_statement_begin__ = 9;
            for (int k0__ = 0; k0__ < N; ++k0__) {
                check_greater_or_equal(function__,"kktt[k0__]",kktt[k0__],1);
            }
            current_statement_begin__ = 10;
            for (int k0__ = 0; k0__ < N; ++k0__) {
                check_greater_or_equal(function__,"qq[k0__]",qq[k0__],1);
                check_less_or_equal(function__,"qq[k0__]",qq[k0__],Q);
            }
            current_statement_begin__ = 11;
            for (int k0__ = 0; k0__ < N; ++k0__) {
                check_greater_or_equal(function__,"rr[k0__]",rr[k0__],1);
                check_less_or_equal(function__,"rr[k0__]",rr[k0__],R);
            }
            current_statement_begin__ = 12;
            for (int k0__ = 0; k0__ < R; ++k0__) {
                check_greater_or_equal(function__,"rq[k0__]",rq[k0__],1);
                check_less_or_equal(function__,"rq[k0__]",rq[k0__],Q);
            }
            current_statement_begin__ = 13;
            check_greater_or_equal(function__,"r_fixed",r_fixed,0);
            check_less_or_equal(function__,"r_fixed",r_fixed,Q);
            current_statement_begin__ = 14;
            for (int k0__ = 0; k0__ < R; ++k0__) {
                check_greater_or_equal(function__,"rcp[k0__]",rcp[k0__],1);
            }
            current_statement_begin__ = 15;
            for (int k0__ = 0; k0__ < N; ++k0__) {
                check_greater_or_equal(function__,"y_r[k0__]",y_r[k0__],0);
            }
            current_statement_begin__ = 16;
            for (int k0__ = 0; k0__ < N; ++k0__) {
                check_greater_or_equal(function__,"n_r[k0__]",n_r[k0__],0);
            }
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 20;
            validate_non_negative_index("theta_raw", "(K * T)", (K * T));
            num_params_r__ += (K * T);
            current_statement_begin__ = 21;
            validate_non_negative_index("xi", "2", 2);
            validate_non_negative_index("xi", "R", R);
            num_params_r__ += 2 * R;
            current_statement_begin__ = 22;
            validate_non_negative_index("mu", "2", 2);
            num_params_r__ += 2;
            current_statement_begin__ = 23;
            validate_non_negative_index("tau", "2", 2);
            num_params_r__ += 2;
            current_statement_begin__ = 24;
            validate_non_negative_index("L_Omega", "2", 2);
            num_params_r__ += ((2 * (2 - 1)) / 2);
            current_statement_begin__ = 25;
            validate_non_negative_index("sigma_theta", "K", K);
            num_params_r__ += K;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_dcpo() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("theta_raw")))
            throw std::runtime_error("variable theta_raw missing");
        vals_r__ = context__.vals_r("theta_raw");
        pos__ = 0U;
        validate_non_negative_index("theta_raw", "(K * T)", (K * T));
        context__.validate_dims("initialization", "theta_raw", "vector_d", context__.to_vec((K * T)));
        vector_d theta_raw(static_cast<Eigen::VectorXd::Index>((K * T)));
        for (int j1__ = 0U; j1__ < (K * T); ++j1__)
            theta_raw(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(theta_raw);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable theta_raw: ") + e.what());
        }

        if (!(context__.contains_r("xi")))
            throw std::runtime_error("variable xi missing");
        vals_r__ = context__.vals_r("xi");
        pos__ = 0U;
        validate_non_negative_index("xi", "R", R);
        validate_non_negative_index("xi", "2", 2);
        context__.validate_dims("initialization", "xi", "vector_d", context__.to_vec(R,2));
        std::vector<vector_d> xi(R,vector_d(static_cast<Eigen::VectorXd::Index>(2)));
        for (int j1__ = 0U; j1__ < 2; ++j1__)
            for (int i0__ = 0U; i0__ < R; ++i0__)
                xi[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < R; ++i0__)
            try {
            writer__.vector_unconstrain(xi[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable xi: ") + e.what());
        }

        if (!(context__.contains_r("mu")))
            throw std::runtime_error("variable mu missing");
        vals_r__ = context__.vals_r("mu");
        pos__ = 0U;
        validate_non_negative_index("mu", "2", 2);
        context__.validate_dims("initialization", "mu", "vector_d", context__.to_vec(2));
        vector_d mu(static_cast<Eigen::VectorXd::Index>(2));
        for (int j1__ = 0U; j1__ < 2; ++j1__)
            mu(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(mu);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mu: ") + e.what());
        }

        if (!(context__.contains_r("tau")))
            throw std::runtime_error("variable tau missing");
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        validate_non_negative_index("tau", "2", 2);
        context__.validate_dims("initialization", "tau", "vector_d", context__.to_vec(2));
        vector_d tau(static_cast<Eigen::VectorXd::Index>(2));
        for (int j1__ = 0U; j1__ < 2; ++j1__)
            tau(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,tau);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable tau: ") + e.what());
        }

        if (!(context__.contains_r("L_Omega")))
            throw std::runtime_error("variable L_Omega missing");
        vals_r__ = context__.vals_r("L_Omega");
        pos__ = 0U;
        validate_non_negative_index("L_Omega", "2", 2);
        validate_non_negative_index("L_Omega", "2", 2);
        context__.validate_dims("initialization", "L_Omega", "matrix_d", context__.to_vec(2,2));
        matrix_d L_Omega(static_cast<Eigen::VectorXd::Index>(2),static_cast<Eigen::VectorXd::Index>(2));
        for (int j2__ = 0U; j2__ < 2; ++j2__)
            for (int j1__ = 0U; j1__ < 2; ++j1__)
                L_Omega(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.cholesky_corr_unconstrain(L_Omega);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable L_Omega: ") + e.what());
        }

        if (!(context__.contains_r("sigma_theta")))
            throw std::runtime_error("variable sigma_theta missing");
        vals_r__ = context__.vals_r("sigma_theta");
        pos__ = 0U;
        validate_non_negative_index("sigma_theta", "K", K);
        context__.validate_dims("initialization", "sigma_theta", "double", context__.to_vec(K));
        std::vector<double> sigma_theta(K,double(0));
        for (int i0__ = 0U; i0__ < K; ++i0__)
            sigma_theta[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < K; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,sigma_theta[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_theta: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  theta_raw;
            (void) theta_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                theta_raw = in__.vector_constrain((K * T),lp__);
            else
                theta_raw = in__.vector_constrain((K * T));

            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > xi;
            size_t dim_xi_0__ = R;
            xi.reserve(dim_xi_0__);
            for (size_t k_0__ = 0; k_0__ < dim_xi_0__; ++k_0__) {
                if (jacobian__)
                    xi.push_back(in__.vector_constrain(2,lp__));
                else
                    xi.push_back(in__.vector_constrain(2));
            }

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  mu;
            (void) mu;  // dummy to suppress unused var warning
            if (jacobian__)
                mu = in__.vector_constrain(2,lp__);
            else
                mu = in__.vector_constrain(2);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  tau;
            (void) tau;  // dummy to suppress unused var warning
            if (jacobian__)
                tau = in__.vector_lb_constrain(0,2,lp__);
            else
                tau = in__.vector_lb_constrain(0,2);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  L_Omega;
            (void) L_Omega;  // dummy to suppress unused var warning
            if (jacobian__)
                L_Omega = in__.cholesky_corr_constrain(2,lp__);
            else
                L_Omega = in__.cholesky_corr_constrain(2);

            vector<local_scalar_t__> sigma_theta;
            size_t dim_sigma_theta_0__ = K;
            sigma_theta.reserve(dim_sigma_theta_0__);
            for (size_t k_0__ = 0; k_0__ < dim_sigma_theta_0__; ++k_0__) {
                if (jacobian__)
                    sigma_theta.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    sigma_theta.push_back(in__.scalar_lb_constrain(0));
            }


            // transformed parameters
            current_statement_begin__ = 29;
            validate_non_negative_index("alpha", "R", R);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  alpha(static_cast<Eigen::VectorXd::Index>(R));
            (void) alpha;  // dummy to suppress unused var warning

            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha,DUMMY_VAR__);
            current_statement_begin__ = 30;
            validate_non_negative_index("beta", "R", R);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  beta(static_cast<Eigen::VectorXd::Index>(R));
            (void) beta;  // dummy to suppress unused var warning

            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta,DUMMY_VAR__);
            current_statement_begin__ = 31;
            validate_non_negative_index("theta", "(K * T)", (K * T));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  theta(static_cast<Eigen::VectorXd::Index>((K * T)));
            (void) theta;  // dummy to suppress unused var warning

            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta,DUMMY_VAR__);


            current_statement_begin__ = 33;
            stan::model::assign(alpha, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        stan::math::exp(get_base1(get_base1(xi,1,"xi",1),1,"xi",2)), 
                        "assigning variable alpha");
            current_statement_begin__ = 34;
            stan::model::assign(beta, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        get_base1(get_base1(xi,1,"xi",1),2,"xi",2), 
                        "assigning variable beta");
            current_statement_begin__ = 36;
            for (int r = 2; r <= R; ++r) {

                current_statement_begin__ = 37;
                stan::model::assign(alpha, 
                            stan::model::cons_list(stan::model::index_uni(r), stan::model::nil_index_list()), 
                            stan::math::exp(get_base1(get_base1(xi,r,"xi",1),1,"xi",2)), 
                            "assigning variable alpha");
                current_statement_begin__ = 38;
                if (as_bool(logical_eq(r,r_fixed))) {

                    current_statement_begin__ = 39;
                    stan::model::assign(beta, 
                                stan::model::cons_list(stan::model::index_uni(r), stan::model::nil_index_list()), 
                                0.5, 
                                "assigning variable beta");
                } else {

                    current_statement_begin__ = 41;
                    if (as_bool(logical_eq(get_base1(rq,r,"rq",1),get_base1(rq,(r - 1),"rq",1)))) {

                        current_statement_begin__ = 42;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(r), stan::model::nil_index_list()), 
                                    stan::model::deep_copy((get_base1(beta,(r - 1),"beta",1) + stan::math::exp(get_base1(get_base1(xi,r,"xi",1),2,"xi",2)))), 
                                    "assigning variable beta");
                    } else {

                        current_statement_begin__ = 44;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(r), stan::model::nil_index_list()), 
                                    get_base1(get_base1(xi,r,"xi",1),2,"xi",2), 
                                    "assigning variable beta");
                    }
                }
            }
            current_statement_begin__ = 49;
            for (int k = 1; k <= K; ++k) {

                current_statement_begin__ = 50;
                stan::model::assign(theta, 
                            stan::model::cons_list(stan::model::index_uni((((k - 1) * T) + 1)), stan::model::nil_index_list()), 
                            get_base1(theta_raw,(((k - 1) * T) + 1),"theta_raw",1), 
                            "assigning variable theta");
                current_statement_begin__ = 51;
                for (int t = 2; t <= T; ++t) {

                    current_statement_begin__ = 52;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni((((k - 1) * T) + t)), stan::model::nil_index_list()), 
                                stan::model::deep_copy((get_base1(theta,((((k - 1) * T) + t) - 1),"theta",1) + (get_base1(sigma_theta,k,"sigma_theta",1) * get_base1(theta_raw,(((k - 1) * T) + t),"theta_raw",1)))), 
                                "assigning variable theta");
                }
            }

            // validate transformed parameters
            for (int i0__ = 0; i0__ < R; ++i0__) {
                if (stan::math::is_uninitialized(alpha(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: alpha" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < R; ++i0__) {
                if (stan::math::is_uninitialized(beta(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: beta" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < (K * T); ++i0__) {
                if (stan::math::is_uninitialized(theta(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: theta" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 29;
            current_statement_begin__ = 30;
            current_statement_begin__ = 31;

            // model body
            {
            current_statement_begin__ = 58;
            validate_non_negative_index("L_Sigma", "2", 2);
            validate_non_negative_index("L_Sigma", "2", 2);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  L_Sigma(static_cast<Eigen::VectorXd::Index>(2),static_cast<Eigen::VectorXd::Index>(2));
            (void) L_Sigma;  // dummy to suppress unused var warning

            stan::math::initialize(L_Sigma, DUMMY_VAR__);
            stan::math::fill(L_Sigma,DUMMY_VAR__);


            current_statement_begin__ = 59;
            stan::math::assign(L_Sigma, diag_pre_multiply(tau,L_Omega));
            current_statement_begin__ = 60;
            for (int r = 1; r <= R; ++r) {

                current_statement_begin__ = 61;
                lp_accum__.add(multi_normal_cholesky_log<propto__>(get_base1(xi,r,"xi",1), mu, L_Sigma));
            }
            current_statement_begin__ = 63;
            lp_accum__.add(normal_log<propto__>(sigma_theta, 0, 0.025000000000000001));
            current_statement_begin__ = 64;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(L_Omega, 4));
            current_statement_begin__ = 65;
            lp_accum__.add(normal_log<propto__>(get_base1(mu,1,"mu",1), 1, 1));
            current_statement_begin__ = 66;
            lp_accum__.add(exponential_log<propto__>(get_base1(tau,1,"tau",1), 0.20000000000000001));
            current_statement_begin__ = 67;
            lp_accum__.add(normal_log<propto__>(get_base1(mu,2,"mu",1), -(1), 1));
            current_statement_begin__ = 68;
            lp_accum__.add(exponential_log<propto__>(get_base1(tau,2,"tau",1), 0.20000000000000001));
            current_statement_begin__ = 71;
            lp_accum__.add(normal_log<propto__>(theta_raw, 0, 1));
            current_statement_begin__ = 74;
            lp_accum__.add(binomial_logit_log<propto__>(y_r, n_r, elt_multiply(stan::model::rvalue(alpha, stan::model::cons_list(stan::model::index_multi(rr), stan::model::nil_index_list()), "alpha"),subtract(stan::model::rvalue(theta, stan::model::cons_list(stan::model::index_multi(kktt), stan::model::nil_index_list()), "theta"),stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_multi(rr), stan::model::nil_index_list()), "beta")))));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("theta_raw");
        names__.push_back("xi");
        names__.push_back("mu");
        names__.push_back("tau");
        names__.push_back("L_Omega");
        names__.push_back("sigma_theta");
        names__.push_back("alpha");
        names__.push_back("beta");
        names__.push_back("theta");
        names__.push_back("Omega");
        names__.push_back("pred_prob");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back((K * T));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(R);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(R);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(R);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((K * T));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_dcpo_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector_d theta_raw = in__.vector_constrain((K * T));
        vector<vector_d> xi;
        size_t dim_xi_0__ = R;
        for (size_t k_0__ = 0; k_0__ < dim_xi_0__; ++k_0__) {
            xi.push_back(in__.vector_constrain(2));
        }
        vector_d mu = in__.vector_constrain(2);
        vector_d tau = in__.vector_lb_constrain(0,2);
        matrix_d L_Omega = in__.cholesky_corr_constrain(2);
        vector<double> sigma_theta;
        size_t dim_sigma_theta_0__ = K;
        for (size_t k_0__ = 0; k_0__ < dim_sigma_theta_0__; ++k_0__) {
            sigma_theta.push_back(in__.scalar_lb_constrain(0));
        }
            for (int k_0__ = 0; k_0__ < (K * T); ++k_0__) {
            vars__.push_back(theta_raw[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < 2; ++k_1__) {
                for (int k_0__ = 0; k_0__ < R; ++k_0__) {
                vars__.push_back(xi[k_0__][k_1__]);
                }
            }
            for (int k_0__ = 0; k_0__ < 2; ++k_0__) {
            vars__.push_back(mu[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < 2; ++k_0__) {
            vars__.push_back(tau[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < 2; ++k_1__) {
                for (int k_0__ = 0; k_0__ < 2; ++k_0__) {
                vars__.push_back(L_Omega(k_0__, k_1__));
                }
            }
            for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(sigma_theta[k_0__]);
            }

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 29;
            validate_non_negative_index("alpha", "R", R);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  alpha(static_cast<Eigen::VectorXd::Index>(R));
            (void) alpha;  // dummy to suppress unused var warning

            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha,DUMMY_VAR__);
            current_statement_begin__ = 30;
            validate_non_negative_index("beta", "R", R);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  beta(static_cast<Eigen::VectorXd::Index>(R));
            (void) beta;  // dummy to suppress unused var warning

            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta,DUMMY_VAR__);
            current_statement_begin__ = 31;
            validate_non_negative_index("theta", "(K * T)", (K * T));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  theta(static_cast<Eigen::VectorXd::Index>((K * T)));
            (void) theta;  // dummy to suppress unused var warning

            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta,DUMMY_VAR__);


            current_statement_begin__ = 33;
            stan::model::assign(alpha, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        stan::math::exp(get_base1(get_base1(xi,1,"xi",1),1,"xi",2)), 
                        "assigning variable alpha");
            current_statement_begin__ = 34;
            stan::model::assign(beta, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        get_base1(get_base1(xi,1,"xi",1),2,"xi",2), 
                        "assigning variable beta");
            current_statement_begin__ = 36;
            for (int r = 2; r <= R; ++r) {

                current_statement_begin__ = 37;
                stan::model::assign(alpha, 
                            stan::model::cons_list(stan::model::index_uni(r), stan::model::nil_index_list()), 
                            stan::math::exp(get_base1(get_base1(xi,r,"xi",1),1,"xi",2)), 
                            "assigning variable alpha");
                current_statement_begin__ = 38;
                if (as_bool(logical_eq(r,r_fixed))) {

                    current_statement_begin__ = 39;
                    stan::model::assign(beta, 
                                stan::model::cons_list(stan::model::index_uni(r), stan::model::nil_index_list()), 
                                0.5, 
                                "assigning variable beta");
                } else {

                    current_statement_begin__ = 41;
                    if (as_bool(logical_eq(get_base1(rq,r,"rq",1),get_base1(rq,(r - 1),"rq",1)))) {

                        current_statement_begin__ = 42;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(r), stan::model::nil_index_list()), 
                                    stan::model::deep_copy((get_base1(beta,(r - 1),"beta",1) + stan::math::exp(get_base1(get_base1(xi,r,"xi",1),2,"xi",2)))), 
                                    "assigning variable beta");
                    } else {

                        current_statement_begin__ = 44;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(r), stan::model::nil_index_list()), 
                                    get_base1(get_base1(xi,r,"xi",1),2,"xi",2), 
                                    "assigning variable beta");
                    }
                }
            }
            current_statement_begin__ = 49;
            for (int k = 1; k <= K; ++k) {

                current_statement_begin__ = 50;
                stan::model::assign(theta, 
                            stan::model::cons_list(stan::model::index_uni((((k - 1) * T) + 1)), stan::model::nil_index_list()), 
                            get_base1(theta_raw,(((k - 1) * T) + 1),"theta_raw",1), 
                            "assigning variable theta");
                current_statement_begin__ = 51;
                for (int t = 2; t <= T; ++t) {

                    current_statement_begin__ = 52;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni((((k - 1) * T) + t)), stan::model::nil_index_list()), 
                                stan::model::deep_copy((get_base1(theta,((((k - 1) * T) + t) - 1),"theta",1) + (get_base1(sigma_theta,k,"sigma_theta",1) * get_base1(theta_raw,(((k - 1) * T) + t),"theta_raw",1)))), 
                                "assigning variable theta");
                }
            }

            // validate transformed parameters
            current_statement_begin__ = 29;
            current_statement_begin__ = 30;
            current_statement_begin__ = 31;

            // write transformed parameters
            if (include_tparams__) {
            for (int k_0__ = 0; k_0__ < R; ++k_0__) {
            vars__.push_back(alpha[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < R; ++k_0__) {
            vars__.push_back(beta[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < (K * T); ++k_0__) {
            vars__.push_back(theta[k_0__]);
            }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 79;
            validate_non_negative_index("Omega", "2", 2);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  Omega(static_cast<Eigen::VectorXd::Index>(2),static_cast<Eigen::VectorXd::Index>(2));
            (void) Omega;  // dummy to suppress unused var warning

            stan::math::initialize(Omega, DUMMY_VAR__);
            stan::math::fill(Omega,DUMMY_VAR__);
            current_statement_begin__ = 80;
            validate_non_negative_index("pred_prob", "N", N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  pred_prob(static_cast<Eigen::VectorXd::Index>(N));
            (void) pred_prob;  // dummy to suppress unused var warning

            stan::math::initialize(pred_prob, DUMMY_VAR__);
            stan::math::fill(pred_prob,DUMMY_VAR__);


            current_statement_begin__ = 82;
            stan::math::assign(Omega, multiply_lower_tri_self_transpose(L_Omega));
            current_statement_begin__ = 85;
            for (int n = 1; n <= N; ++n) {

                current_statement_begin__ = 86;
                stan::model::assign(pred_prob, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            inv_logit((get_base1(alpha,get_base1(rr,n,"rr",1),"alpha",1) * (get_base1(theta,get_base1(kktt,n,"kktt",1),"theta",1) - get_base1(beta,get_base1(rr,n,"rr",1),"beta",1)))), 
                            "assigning variable pred_prob");
            }

            // validate generated quantities
            current_statement_begin__ = 79;
            stan::math::check_corr_matrix(function__,"Omega",Omega);
            current_statement_begin__ = 80;

            // write generated quantities
            for (int k_1__ = 0; k_1__ < 2; ++k_1__) {
                for (int k_0__ = 0; k_0__ < 2; ++k_0__) {
                vars__.push_back(Omega(k_0__, k_1__));
                }
            }
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(pred_prob[k_0__]);
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_dcpo";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= (K * T); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_raw" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= 2; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= R; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "xi" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= 2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= 2; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= 2; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L_Omega" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_0__ = 1; k_0__ <= R; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= R; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= (K * T); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= 2; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= 2; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Omega" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pred_prob" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= (K * T); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_raw" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= 2; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= R; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "xi" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= 2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= ((2 * (2 - 1)) / 2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_Omega" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_0__ = 1; k_0__ <= R; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= R; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= (K * T); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= ((2 * (2 - 1)) / 2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Omega" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pred_prob" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}

typedef model_dcpo_namespace::model_dcpo stan_model;


#endif
